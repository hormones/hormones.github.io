{"pages":[{"title":"","text":".my-red { color: red; } .my-red-bolder { color: red; font-weight: bolder; }","link":"/scripts/index.css"},{"title":"","text":"console.log(document.title);","link":"/scripts/index.js"}],"posts":[{"title":"安装V2","text":"准备工作 国外VPS一只 域名一只，已解析到国外VPS的IP上 安装此处安装V2指的是通过一键脚本安装，V2即v2ray，具体是什么不多说，懂的自然懂。 最好是纯净系统，先更新软件列表、安装BBRPlus版内核，然后安装fail2ban，最后安装V2 更新软件列表索引apt-get update 安装BBRPlus版内核 BBR加速是谷歌公司研发的TCP拥塞控制算法，可极大的提高网络传输速度，在BBR之后又出来了魔改BBR 和BBRplus 两者在速度上都有很大的提升。特别是国内外物理距离远，出口带宽拥堵，在网络极不稳定的情况下，可提升网络传输速度达20倍！ BBRPlus一键脚本地址: https://github.com/ylx2016/Linux-NetSpeed 123456789101112131415# 预先准备centos：yum install ca-certificates wget -y &amp;&amp; update-ca-trust force-enabledebian/ubuntu：apt-get install ca-certificates wget -y &amp;&amp; update-ca-certificates# 卸载内核并安装新内核，然后重启# 执行命令然后选择：安装 BBRplus版内核# ！！！注意！！!如果安装过程中有弹窗提示则选择 &lt;NO&gt;wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh# 查看内核版本与系统信息cat /proc/version# 启用BBRplus# 执行命令然后选择：使用BBRplus+FQ版加速wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh 安装fail2ban防止暴力破解Internet网络环境复杂，网上有大量的攻击机器在不断的对全网机器扫描常用端口(22、80、8080、443等)并进行暴力破解，轻则影响机器性能，重则服务被攻击、数据丢失，甚至机器被完全控制，危害极大！ 查看登录日志，可以看到有陌生大量的IP在不断的用各种用户(以root用户最多)和密码在不断的尝试登录，因此有必要对其登录进行限制，尽量避免密码被破解的风险！ 具体的防御措施在此不一一列出，仅针对安装V2的VPS提供一种极为简单的防御办法 — fail2ban一键脚本 SSH暴力破解是指攻击者通过密码字典或随机组合密码的方式尝试登陆服务器（针对的是全网机器），这种攻击行为一般不会有明确攻击目标，多数是通过扫描软件直接扫描整个广播域或网段。 fail2ban是一款实用软件，可以监视你的系统日志，然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作。 fail2ban一键脚本地址: https://github.com/FunctionClub/Fail2ban 123456789101112131415161718192021222324# 执行以下命令，然后按提示操作(询问是否修改ssh端口，最大尝试次数，禁用登录时间)，我一般选否，3次，禁用24小时wget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh &amp;&amp; bash fail2ban.sh 2&gt;&amp;1 | tee fail2ban.log# 重启Fail2bansystemctl restart fail2ban# 启动Fail2bansystemctl start fail2ban# 停止Fail2bansystemctl stop fail2ban# 查看状态iptables -L -nfail2ban-client status ssh-iptablesfail2ban-client status sshd# 添加白名单fail2ban-client set ssh-iptables addignoreip IP地址 # 删除白名单fail2ban-client set ssh-iptables delignoreip IP地址# 解禁IP# 被误伤无法ssh登录时，通过VNC后台或者换一个IP登录上去解禁被ban的IP，以下两个命令都要执行fail2ban-client set ssh-iptables unbanip IP地址fail2ban-client set sshd unbanip IP地址 安装V2注意，在依据此教程安装时，请勿选择有CDN标识的安装类型，该教程未给出CDN安装方式的前置教程 需要提前准备： 域名一只 –&gt; DNS解析到当前IP上 V2一键脚本地址: https://github.com/mack-a/v2ray-agent 123# 一键脚本执行安装# 选择项：任意组合安装 --&gt; Xray-core --&gt; 安装类型选 04（VLESS+TCP+xtls-rprx-direct和Trojan） --&gt; 输入域名 --&gt; 使用随机UUID --&gt; 结束wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh","link":"/post/48b5183/"},{"title":"VPS一键脚本重装Linux系统","text":"为什么要使用VPS一键脚本重装系统 商家提供的系统版本有限，没有自己需要的版本 商家的系统安装有自己不想要的服务 所需环境当前架构：KVM/XEN/HYPER-V，不支持OpenVZ当前系统：Debian/Ubuntu/CentOS 如何检测我的VPS服务器是否支持一键DD在Debian/Ubuntu 下安装: apt-get install virt-what执行命令: virt-what只要结果显示为kvm/xen/hyper-v这三个都可以，其他不行。 准备工作12345678910#Debian/Ubuntu:apt-get updateapt-get install -y xz-utils openssl gawk file #RedHat/CentOS:yum updateyum install -y xz openssl gawk file# (可选步骤)国内NAT机需要设置DNSecho nameserver 114.114.114.114 &gt; /etc/resolv.conf 一键脚本安装1234# 国内使用此示例语句(自定义镜像源，安装Debian10x64)bash InstallNET.sh -d 10 -v 64 -a --mirror 'http://mirrors.aliyun.com/debian/' -p &quot;root密码&quot; -port &quot;ssh端口&quot;# 国外使用此示例语句(安装Debian10x64)bash InstallNET.sh -d 10 -v 64 -a -p &quot;root密码&quot; -port &quot;ssh端口&quot; 一键脚本执行后，会断开连接，耐心等待即可，不出意外10分钟左右进行连接即可，如果商家提供了VNC，可以去VNC里查看安装进度。 参数含义： --mirror '镜像地址'：可选参数，自定义镜像地址(国内VPS建议使用国内镜像源) -p &quot;root密码&quot; -port &quot;ssh端口&quot;：可选参数，自定义密码和端口 -d 10 -v 64: 标识安装64位的Debian10 -a/-m: 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示. 对于不能自动获取IP的VPS，还需要添加以下参数： –ip-addr:IP Address /IP地址 –ip-gate:Gateway /网关 –ip-mask:Netmask /子网掩码 以下为默认标准源支持的DD版本，自定义镜像源不一定可用，可以自行替换命令中参数安装，如果输入了其它不支持或不存在的系统版本，则会出现提示中止安装：The version not found in this mirror, Please change mirror 参数 版本 备注 -d 8 -v 64 Debian8x64 -d 9 -v 64 Debian9x64 -d 10 -v 64 Debian10x64 -d 11 -v 64 Debian11x64 -u 12.04 -v 64 Ubuntu12.04x64 -u 14.04 -v 64 Ubuntu14.04x64 -u 16.04 -v 64 Ubuntu16.04x64 -u 18.04 -v 64 Ubuntu18.04x64 -u 20.04 -v 64 Ubuntu20.04x64 -c 6.9 -v 64 CentOS6.9x64 该脚本支持的CentOS最高版本为6.9 注意事项 重装的默认系统源自官方发行版 安装过程全自动进行，无需VNC操作，无需进入救援模式 DD的linux系统安装完成后的默认用户名为root，默认密码为:MoeClub.org 安装完成后，请立即修改远程端口和登录密码！！！ 本教程已通过自测的商家 炭云","link":"/post/604b3f8c/"},{"title":"VPS一键脚本重装Windows系统","text":"为什么要使用VPS一键脚本重装系统 商家提供的系统版本有限，没有自己需要的版本 商家的系统安装有自己不想要的服务 所需环境当前架构：KVM/XEN/HYPER-V，不支持OpenVZ当前系统：Debian/Ubuntu/CentOS 如何检测我的VPS服务器是否支持一键DD在Debian/Ubuntu 下安装: apt-get install virt-what执行命令: virt-what只要显示为kvm/xen/hyper-v这三个都可以，其他不行。 准备工作1234567#Debian/Ubuntu:apt-get updateapt-get install -y xz-utils openssl gawk file #RedHat/CentOS:yum updateyum install -y xz openssl gawk file 一键脚本安装wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'DD镜像直链地址' 请更换以上命令中的“DD镜像直链地址”，一键脚本执行后，会断开连接，耐心等待即可，不出意外10分钟左右进行连接即可，如果商家提供了VNC，可以去VNC里查看安装进度。 对于不能自动获取IP的VPS，还需要添加以下参数： –ip-addr:IP Address /IP地址 –ip-gate:Gateway /网关 –ip-mask:Netmask /子网掩码 如何获取DD包直链地址 目前比较好用的是NATEE大佬制作的DD包，用过的都说好，直链地址：https://dd.nat.ee （如果失效了，请善用搜索） 这个一键安装脚本是萌咖大佬写的，但是萌咖大佬提供的直链已经失效，应该是关站保平安了，可以尝试搜索网友们备份的镜像，但是要注意安全性，小心被人植入了后门 其它大佬制作的DD镜像，请善用搜索 注意事项(必看！！！) 一键脚本执行后一段时间会断开连接，此时可以去VNC里看进度，一键脚本不需要你做任何操作了，如果VNC里需要让你操作选项，大概率是下载镜像失败了，需要退出并重启系统后再执行一键脚本（我有一次尝试了4次才成功），商家没有提供VNC的只能等待了 VNC中如果看到 “Starting graphical installation” 或者类似表达,则表示正在安装，只需要耐心等待安装完成即可 在安装镜像的过程中,不会走进度条(进度条一直显示为0%)，安装完成后会自动启动！！！ 安装完成后，请立即修改远程端口和登录密码！！！ 本教程仅提供了最基础的安装方式，是否适用您的机器请自行搜索、判断与尝试 Windows镜像KMS激活以管理员身份运行CMD执行以下命令(KMS激活服务器地址请善用搜索) 12slmgr /skms 地址slmgr /ato 本教程已通过自测的商家 VIRMACH","link":"/post/2cb6b26a/"},{"title":"内网穿透利器NPS搭建教程","text":"前言本文仅介绍docker安装NPS服务器的方式 准备工作 一台拥有公网IP的服务器、VPS或者NAT服务器 需要内网穿透的电脑、设备 (可选)一台测试机、测试NPS搭建是否成功 注意事项 内网穿透服务器最好使用国内服务器，国外服务器延迟高、可能速度慢、甚至流量大了可能被请喝茶，要慎重 国内服务器一般都要实名认证，请合理合规使用 国内服务器商家提供的系统一般都有带有监控软件，如果要想用的舒适，建议自行重装系统，可参考教程：VPS一键脚本重装Linux系统 本教程仅提供基础安装，进阶使用请自行研究NPS官方文档 NPS介绍NPS官方文档 nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。 正式安装服务端安装 安装docker请参考文章：Linux安装Docker 拉取服务端镜像：docker pull ffdfgdfg/nps 下载并修改配置文件下载conf文件夹并解压，或前往项目主页自行下载 继续阅读官方文档修改配置文件主要修改点如下：1234567891011121314151617# NAT服务器设置为内网ip地址，注意是内网ip地址# 具有公网IP的云服务器设置为公网ip地址http_proxy_ip=xxx.xxx.xxx.xxx# http的默认是 80 端口，如果占用更换为其他http_proxy_port=80# 确保防火墙的 443 端口是开放的https_proxy_port=443# 设置 npc 的启动端口号，即服务端客户端通信端口bridge_port=xxx# web管理页面的账号web_username=admin# web管理页面的密码web_password=123# web管理端口，该端口和上面的 npc 启动端口不能相同，否则访问不到wen管理页面web_port=8080 启动：docker run -d --name nps --net=host -v &lt;本机conf目录&gt;:/conf ffdfgdfg/nps 客户端安装TODO… 以Windows远程桌面为例进行内网穿透TODO…","link":"/post/d14f8d70/"},{"title":"在Github Pages上搭建Hexo博客","text":"名词解释 CI/CD: 持续集成 (CI) 和持续部署 (CD) 实现的效果搭建Hexo博客，源文件推送到开发仓库(可以是私有仓库)，生成的静态文件则推送到GitHub Pages，访问username.github.io即可看到效果。 准备工作 了解Markdown、Git、GitHub Pages、SSH Key的含义和基本作用 听说过Hexo博客框架 已在本地安装好Node、Git、VS Code 环境参考 开发环境为Windows 本地Git版本：version 2.33.0.windows.2 Node版本：v14.17.6 官方建议：安装最新版本的Hexo，以及 推荐的 Node.js 版本。 本地安装并启动Hexo执行命令执行命令，然后打开浏览器，输入http://localhost:4000查看效果 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 配置参考及目录结构有能力的建议参考英文文档，中文文档更新不及时，有些教程已经过时或有误。 Hexo官方中文文档 Hexo官方英文文档 Hexo文件目录结构 1234567891011|── node_modules // 外部依赖|── scaffolds // 模版文件夹，当您新建文章时，hexo会根据 scaffold来建立文件。|── source // 资源文件夹，用于放置文章、图片等资源| |── _drafts // 草稿| |── _posts // 已发布文章|── themes // 主题文件夹| |── landscape // hexo官方默认主题|── .gitignore // 指定不纳入git版本控制的文件|── _config.yml // 配置信息，您可以在此配置大部分的参数。|── package.json // 应用程序的信息|── package-lock.json .gitignore 文件配置参考，用于配置Git忽略版本管理的文件或文件夹： 1234567.DS_Store # 用于控制一个文件夹的显示方式（列表、图标、分栏和CoverFlow）和背景图标等Thumbs.db # Windows自动生成的垃圾文件db.json # hexo缓存文件*.log # 日志node_modules/ # 外部依赖public/ # 博客生成的静态文件.deploy*/ # 执行hexo deploy命令部署到Git上的内容目录 推送源代码并部署到GitHub Pages建议采用第一种方案，搞定了后发布文章会变得极为简单，可以专注于文章的编写。 以下两种方案均支持源代码推送到私有仓库中，生成的静态文章则推送到username.github.io仓库中。 GItHub Actions - CI/CDGitHub Actions持续集成服务方案 - 推荐使用此方案 在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。 因此只需要往源文件仓库push更新源文件，GitHub Actions 监控到 push 操作时，就自动拉取源代码并执行 hexo clean、hexo g -d 指令，完成博文发布。 GitHub Actions官方文档: https://docs.github.com/cn/actions/quickstart 注意，项目默认的Action文件是 .github/workflows/分支名称.yml ，如：.github/workflows/main.yml，如果项目中包含该文件，则会在push代码后自动执行workflows。 这里我们直接使用sma11black开发好的GitHub Actions脚本，请先看此教程。 新建源代码仓库和GitHub Pages仓库 在GitHub上新建源代码仓库((可以是私有仓库，GitHub允许用户免费持有一个私有仓库) GitHub Pages仓库名称必须为：username.github.io，如：hormones.github.io 生成SSH Key在cmd下输入ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C &quot;你的邮箱&quot;生成公钥和私钥，生成的公钥与私钥位于当前用户家目录的.ssh文件夹中（可在cmd下输入echo %USERPROFILE%查看当前系统用户目录），私钥文件名为id_rsa，公钥文件名为id_rsa.pub 将生成的私钥作为私有仓库下Settings &gt; Secrets 下的一个名叫 DEPLOY_KEY 的 Secret。注意：需要复制私钥中的整个内容。Secret 相当于一个变量，可以使私有变量不公开。 将生成的公钥作为公有仓库下 Settings &gt; Deploy Keys 的 Deploy Key。Deploy Keys 中的公钥针对于当前仓库。 为什么要用 SSH Key？ SSH Key，是一对密匙：公钥+私钥，用于加密本地仓库和远程仓库的传输内容。是非对称加密，可公钥加密、私钥解密；或私钥加密、公钥解密。 使用 GitHub Actions 是借助 GitHub 提供的环境，跟本地环境一样，也需要有私钥。当 GitHub Action 执行 hexo g -d 时，用私钥 DEPLOY_KEY 加密，GitHub 用网站文件仓库的 Deploy Key 进行验证。 新建GitHub Actions配置文件如果源代码分支名为main，则新建配置文件.github\\workflows\\main.yml，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 用于Guthub Actions持续集成name: Deployon: [push]# 如无特别需求，理论上只需要需改此处的环境变量env: GIT_USER: yourname # 修改为你的用户名 GIT_EMAIL: xxx@xxx.com # 修改为你的邮箱jobs: build: runs-on: ubuntu-latest name: A job to deploy blog. steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true # Checkout private submodules(themes or something else). # 缓存依赖项以加快workflows（GitHub将删除任何超过7天未访问的缓存条目） - name: Cache node modules uses: actions/cache@v2 id: cache with: path: node_modules key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-node- - name: Install Dependencies if: steps.cache.outputs.cache-hit != 'true' run: npm ci # 部署 hexo 博客网站 - name: Deploy id: deploy uses: sma11black/hexo-action@v1.0.4 with: deploy_key: ${{ secrets.DEPLOY_KEY }} # 这就是私钥变量 user_name: ${{ env.GIT_USER }} # (or delete this input setting to use bot account) user_email: ${{ env.GIT_EMAIL }} # (or delete this input setting to use bot account) commit_msg: ${{ github.event.head_commit.message }} # (or delete this input setting to use hexo default settings) # Use the output from the `deploy` step(use for test action) - name: Get the output run: | echo &quot;${{ steps.deploy.outputs.notify }}&quot; Hexo设置 安装 hexo-deployer-git: npm install hexo-deployer-git --save 修改配置文件.config.yml 123456deploy: type: git # 由于我们使用SSH KEY获取代码权限，则必须要注意路径为ssh格式，如下例所示 repo: &lt;repository url&gt; # 例：git@github.com:用户名/仓库名称.git branch: [branch] # 分支名称 # message: [message] # 提交到github pages的注释，建议注释掉 提交代码提交代码后，将会触发Gtihub Actions，此时可以去GitHub上查看效果 123456789101112131415# 先初始化用户名和邮箱git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@yyy.com&quot;# 初始化本地仓库git init# 将文件全部添加到待提交git add .# 执行提交，提交到本地仓库git commit -m 输入本次提交的注释# 关联github仓库git remote add origin 这里替换成你的仓库地址# github新建的仓库主版本已更改为main，原来是master...# 如果之前使用过github，则不会要求登录，如要求登录，按指引操作即可git push -u origin main 访问usernme.github.io查看效果手动构建并推送这种方案很原始很low，建议使用持续集成服务方案（其实持续集成服务就是程序自动帮你做了一些指令操作而已，时间多的可以先尝试一次手动构建，可以加深对持续集成服务的理解，然后再替换成CI/CD） 上传源代码到仓库 在GitHub上新建源代码仓库((可以是私有仓库，GitHub允许用户免费持有一个私有仓库) cmd到工作目录下，输入以下命令后，刷新GitHub，即可看到上传的文件 123456789101112131415# 先初始化用户名和邮箱git config --global user.name &quot;xxxxx&quot;git config --global user.email &quot;xxx@yyy.com&quot;# 初始化本地仓库git init# 将文件全部添加到待提交git add .# 执行提交，提交到本地仓库git commit -m &quot;输入本次提交的注释&quot;# 关联github仓库git remote add origin 这里替换成你的仓库地址# github新建的仓库主版本已更改为main，原来是master...# 如果之前使用过github，则不会要求登录，如要求登录，按指引操作即可git push -u origin main 手动构建静态文件并上传到GitHub Pages 在GitHub上新建公有仓库 注意：公有仓库名称必须为：username.github.io,如：hormones.github.io 安装hexo-deployer-git npm install --save hexo-deployer-git 在_config.yml配置如下： 123456deploy: type: git # example, https://github.com/hexojs/hexojs.github.io repo: https://github.com/&lt;username&gt;/&lt;project&gt; branch: [branch] # 分支名称 message: [message] # 提交到GitHub Pages的注释，可选配置，可以注释掉 运行hexo clean &amp;&amp; hexo deploy。 访问username.github.io查看效果 拉取源代码到新的工作目录有时候需要在另外一台电脑上写博客并发布，因此需要拉取仓库中代码下来。 12345678# cmd到工作空间下，执行以下命令(无需提前创建项目目录，会自动生成)git clone 这里替换成你的仓库地址# 安装hexonpm install hexo-cli -g# 安装项目依赖：下载完成后，cmd进入项目空间，执行以下命令npm install# 查看效果hexo server SEO优化生成 sitemap 站点地图 站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 等搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。 先安装谷歌的插件：npm install hexo-generator-sitemap --save 在博客根目录的_config.yml中改url为你的站点地址并添加代码： 1234567# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://username.github.io/# add sitemapsitemap: path: sitemap.xml 发布到博客后可以通过https://username.github.io/sitemap.xml查看该文件。 添加 robots.txtrobots.txt是搜索引擎蜘蛛协议，告诉引擎哪些要收录，哪些禁止收录。 source文件夹下新建robots.txt，内容如下: 123456789101112User-agent: *Allow: /Allow: /categories/Allow: /tags/Allow: /archives/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://username.github.io/sitemap.xml hexo-abbrlink 链接持久化大家知道Hexo默认的链接是http://xxx.yyy.com/2018/07/14/hello-world这种类型的，这源于站点目录下的配置_config.yml里的配置:permalink: :year/:month/:day/:title/，这种默认配置的缺点就是一般文件名是中文，导致url链接里有中文出现，这会造成很多问题，如使用gitment，也不利于 SEO，另外年月日都会有分隔符。 hexo-abbrlink这个插件，只要不修改md文件的abbrlink的值， url就永久不会改变。如此md文件名和文件内容也可以随便改了。后面的层级更短，这样也有利于SEO优化。 安装：npm install hexo-abbrlink --save _config.yml配置： 1234permalink: post/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 参考链接 使用 GitHub Actions 实现 Hexo 博客自动部署","link":"/post/be2d3818/"},{"title":"安装MariaDB","text":"Docker方式安装1234567891011121314151617181920212223242526272829303132# 搜索mariadb镜像docker search mariadb# 下载docker镜像docker pull mariadb# 查看本地已有的所有镜像docker images# 建一个目录作为和容器的映射目录mkdir -p /data/mariadb/data# 启动mariad镜像# PS: 删除容器后，重新创建容器前，需要先删除映射目录下的文件(网上有人说的，未验证)# PS: ！！！坑，环境变量中的密码如果包含#$等特殊字符可能会导致创建的用户初始密码有问题，无法登录！！！docker run --name mariadb -p 23306:3306 \\-e MARIADB_ROOT_PASSWORD=123456 \\-e MARIADB_USER=mock \\-e MARIADB_PASSWORD=123456 \\-e MARIADB_DATABASE=mock \\-v /data/mariadb/data:/var/lib/mysql \\--restart=always \\-d mariadb# 查看运行容器docker ps -a # 进入容器docker exec -it mariadb bash# 在容器内登录数据库mysql -uroot -p密码","link":"/post/13676/"},{"title":"MariaDB-常用语法","text":"1234567891011# 新建用户并赋权超级管理员权限GRANT ALL PRIVILEGES ON *.* TO 'ethan'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;# 新建数据库和用户并赋予数据库权限CREATE DATABASE nextcloud;GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;# 查看当前用户权限show grants;# 查看指定用户权限show grants for 'nextcloud'@'%';# 修改密码SET PASSWORD FOR 'nextcloud'@'%' = PASSWORD('123456');","link":"/post/54347/"},{"title":"安装PostgreSQL","text":"Debian安装PostgreSQL1312345678910111213141516171819202122232425262728293031323334353637383940414243444546# 更新系统及其软件包并重启apt updateapt -y upgradereboot# 添加PostgreSQL存储库apt updateapt -y install gnupg2wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -# 创建文件pgdg.list并新增内容vim /etc/apt/sources.list.d/pgdg.list# 新增内容deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main# 安装PostgreSQLapt updateapt -y install postgresql-13 postgresql-client-13# 修改监听端口(可选，要保证端口已放开)# 修改监听地址并设置可外网访问vim /etc/postgresql/13/main/postgresql.conf# 修改以下内容listen_addresses = '*'port = 端口号# 修改访问验证方式vim /etc/postgresql/13/main/pg_hba.conf# 新增内容host all all 0.0.0.0/0 md5# 启动数据库服务器pg_ctlcluster 13 main start# 查看服务状态pg_ctlcluster 13 main statussystemctl status postgresql@13-main.service# 切换到用户postgressu - postgres# 进入psql控制台psql ?database# 列出数据库psql -l# 退出psql控制台\\q","link":"/post/11529/"},{"title":"PostgreSQL-常用语法","text":"常用语法12# 新建用户CREATE USER xxx WITH PASSWORD '***'; 12# 新建数据库CREATE DATABASE yyy OWNER xxx; 12# 数据库赋权GRANT ALL PRIVILEGES ON DATABASE yyy TO xxx;","link":"/post/53944/"},{"title":"Linux安装Docker","text":"前言注意：Debian10x64已通过自测，Ubuntu和CentOS暂未自测，此处仅做记录备用 安装前必读Linux 内核：官方建议 3.10 以上 注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 sudo 准备工作 查看当前的内核版本，命令：uname -r Docker 对Linux 内核版本的最低要求是3.10，如果内核版本低于3.10 会缺少一些运行Docker 容器的功能。 更新软件包 12345# Debian/Ubuntuapt update# CentOSyum update 卸载旧版本（如果之前安装过的话） 1234567# Debian/Ubuntuapt remove docker docker-engine docker.io containerd runc# CentOSyum remove docker docker-client docker-client-latest \\ docker-common docker-latest docker-latest-logrotate \\ docker-logrotate docker-engine 安装Docker 添加使用 HTTPS 传输的软件包以及 CA 证书 12345# Debian/Ubuntuapt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common lsb-release# CentOSyum install -y yum-utils device-mapper-persistent-data lvm2 设置源，添加软件源的 GPG 密钥 1234567891011121314# Debian - 阿里源，适用于国内服务器curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | apt-key add -# Debian - 官方源，适用于国外服务器curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -# Ubuntu - 阿里源，适用于国内服务器curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -# Ubuntu - 官方源，适用于国外服务器curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -# CentOS - 阿里源，适用于国内服务器yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# CentOS - 官方源，适用于国外服务器yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 将 Docker 版本库添加到APT源 1234567891011# Debian - 阿里源，适用于国内服务器add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian $(lsb_release -cs) stable&quot;# Debian - 官方源，适用于国外服务器add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;# Ubuntu - 阿里源，适用于国内服务器add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;# Ubuntu - 官方源，适用于国外服务器add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;# CentOS - 无需此步骤 用新添加的 Docker 软件包来进行升级更新 12345# Debian/Ubuntuapt update# CentOSyum update 确保要从Docker repo而不是默认的Debian repo安装(CentOS无需此步骤) 12# Debian/Ubuntuapt-cache policy docker-ce 安装 Docker 1234567891011121314151617# Debian/Ubuntu - 安装最新版apt install docker-ce# Debian/Ubuntu - 列出可用的版本号并安装指定版本# 例：apt install docker-ce=18.03.0ce-0ubuntuapt-cache madison docker-ceapt install docker-ce=&lt;VERSION&gt;# CentOS - 安装最新版# 请接受此指纹: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35yum install docker-ce docker-ce-cli containerd.io# CentOS - 列出可用的版本号并安装指定版本# 例：yum install -y docker-ce-19.03.11 docker-ce-cli-19.03.11 containerd.ioyum list docker-ce --showduplicates | sort -ryum install -y docker-ce-&lt;VERSION&gt; docker-ce-cli-&lt;VERSION&gt; containerd.io 启动Docker(Debian/Ubuntu无需此步骤) 12# CentOSsystemctl start docker 检查 Docker 是否安装成功 12# Debian/Ubuntu/CentOSdocker -v 修改镜像源以提升镜像拉取速度 国内服务器大概率无法pull镜像，通过VIM编辑文件，添加以下内容： 1234{ &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;10.0.0.12:5000&quot;]} 修改镜像源命令如下： 12345# Debian/Ubuntu/CentOSvim /etc/docker/daemon.json# vim后重启docker服务systemctl restart docker","link":"/post/96e9ca9a/"},{"title":"低版本AngularJs(1.2.12及以下)输入中文完成后不触发ng-model的问题","text":"问题描述当使用的AngularJs版本低于1.2.13时，使用输入法输入中文无法触发ng-model的双向绑定，此时必须再键入其它任意字符或者使输入框失去焦点，才能正确获取到ng-model的绑定值。这会对某些使用场景造成一些困扰，如搜索关键字自动补全，列表即时过滤等。 环境说明 AngularJs版本：1.2.12及以下 chrome浏览器版本：65.0.3325.181（正式版本） （64 位） 解决方案1. 更换angualrJs版本到1.2.13或以上1.2.13及以上版本已修复该BUG。对一个庞大的项目或者老项目来说，贸然更换版本有一定的风险，可能会导致已完成开发功能点不可用，应确保有合格且全面的测试以发现问题并修复，保障线上运行时不会出错。注意：在更换AngularJs版本时，要考虑到AngularJs相关插件的版本同步更新。 2. 修改源码AngularJs会为添加了ng-model指令的输入框绑定一系列监听，当input输入框类型为text时，绑定监听的方法为textInputType在textInputType方法中，绑定了compositionstart、compositionend、input的事件监听，这就是对中文输入等非直接输入的监听事件(具体作用可自行搜索)，代码如下所示: 12345678910111213141516171819202122232425262728293031323334353637function textInputType(scope, element, attr, ctrl, $sniffer, $browser) { var composing = false; element.on('compositionstart', function() { composing = true; }); element.on('compositionend', function() { composing = false; }); var listener = function() { // composing为true时，直接return，不执行listener if (composing) return; var value = element.val(); if (toBoolean(attr.ngTrim || 'T')) { value = trim(value); } if (ctrl.$viewValue !== value) { scope.$apply(function() { ctrl.$setViewValue(value); }); } }; if ($sniffer.hasEvent('input')) { element.on('input', listener); } else { // 其它代码在此省略 ... } // 其它代码在此省略 ...} 按代码逻辑来看，预想的是：在键入中文时，触发compositionstart，将composing值修改为true，输入完成触发compositionend，将composing值修改为false，然后触发input，执行listener，完成双向绑定。理想触发顺序为 compositionstart --&gt; compositionend --&gt; input --&gt; 执行listener但是在chrome浏览器中，由于浏览器机制问题，实际触发顺序为： compositionstart --&gt; input --&gt; 执行listener(实际并未执行)--&gt; compositionend因此，针对chrome浏览器，我们需要在触发compositionend后，才执行listener，所以，我们可以直接在compositionend方法内部调用listener: 1234element.on('compositionend', function() { composing = false; listener();}); 实际上，1.2.13及以上版本就是这么做的。 3. 自定义指令在某些特殊情况下，如果更换版本、修改源码均不可行，可以考虑自定义指令实现ng-model相同的功能。 4. 更换浏览器。。。","link":"/post/11509/"},{"title":"nextcloud安装","text":"docker方式安装1234567891011121314151617181920212223242526272829// 安装Mysqldocker pull mysqldocker run --name=mysql -e MYSQL_ROOT_PASSWORD=123456 -d -p 3306:3306 --restart=always mysql//创建nextcloud数据库：docker exec -it mysql mysql -u root -pCREATE DATABASE nextcloud;GRANT ALL ON *.* TO 'root'@'%';flush privileges;exit;// 安装Nextclouddocker pull nextcloud// 简单解释// -v /D/nextcloud/data:/var/www/html/data 目录映射到宿主机，注意要先创建好本机的目录// --link mysql:db 关联Mysqldocker run -d -p 9999:80 --name=nextcloud --link mysql:db \\-v /D/nextcloud/data:/var/www/html/data \\-v /D/nextcloud/config:/var/www/html/config \\-v /D/nextcloud/custom_apps:/var/www/html/custom_apps \\-v /D/SData:/SData \\--restart=always nextcloud// 打开页面初始化nextcloud: localhost:9999// 额外：手动添加文件到用户目录下// 执行命令更新nextcloud数据库扫描新添加的文件docker exec --user www-data nextcloud php occ files:scan --all docker-compose方式安装docker-compose基础命令 12docker-compose up -ddocker-compose down docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: '2'# 必看！！！ 宿主机必须先创建好映射目录services: mysql: container_name: mysql image: mysql restart: always ports: - 3306:3306 volumes: - /D/nextcloud/mysql:/var/lib/mysql environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=123456 networks: - net188# mariadb: # 使用mariadb会报错，原因未知# container_name: mariadb# image: mariadb# restart: always# ports:# - 3306:3306# volumes:# - /D/nextcloud/mariadb:/var/lib/mysql# environment:# - TZ=Asia/Shanghai# - MYSQL_ROOT_PASSWORD=123456# command: 'mysqld --innodb-flush-method=fsync'# networks:# - net188 nextcloud: container_name: nextcloud image: nextcloud restart: always depends_on:# - mariadb - mysql volumes: - /D/nextcloud/data:/var/www/html/data - /D/nextcloud/config:/var/www/html/config - /D/nextcloud/custom_apps:/var/www/html/custom_apps - /D/SData:/SData ports: - 9999:80 networks: - net188networks: net188: driver: bridge ipam: driver: default config: - subnet: 192.188.1.0/24 gateway: 192.188.1.1","link":"/post/48206/"},{"title":"Win10专业版与企业版安装Docker","text":"前言 WSL2版的docker资源占用高解决方案，在你的%USERPROFILE% 即C:\\Users\\用户名, 创建一个 .wslconfig 文件，注意前面有个点，添加内容如下: 12345678910111213[ws12]memory=4GBswap=0processors=2localhostForwarding=trueswapFile=%USERPROFILE%\\AppData\\Local\\Temp\\swap_ws12.vhdx[ws1]memory=1GBswap=512MBprocessors=2localhostForwarding=trueswapFile=%USERPROFILE%\\AppData\\Local\\Temp\\swap_ws1.vhdx 开启Hiper-V 控制面板 –&gt; 程序 –&gt; 启用或关闭Windows功能 –&gt; 开启Hiper-V –&gt; 重启 下载docker for windows并无脑安装 下载地址：https://hub.docker.com/editions/community/docker-ce-desktop-windows 安装完成后，Docker 会自动启动。通知栏上会出现个小鲸鱼的图标，这表示 Docker 正在运行。 如果启动中遇到因 WSL 2 导致地错误，请安装 WSL 2。 安装好后，打开DOS窗口检测是否安装成功 docekr --version","link":"/post/27068/"},{"title":"Win10开机自动登录的方法","text":"可以通过设置注册表，让Win10开机自动输入用户名和密码登录。方法如下： 按WIN+R键，输入regedit打开注册表编辑窗口 依次点开：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon 修改(没有则添加)4个字符串参数： AutoAdminLogon：是否自动登录，1：是；0：否（设置成1） DefaultUserName：登录用户名 DefaultPassword：登录密码 DefaultDomainName：登录域名（没有域可以不设置） 设置完成后，重启电脑可以看到会自动登录了","link":"/post/14802/"}],"tags":[{"name":"V2","slug":"V2","link":"/tags/V2/"},{"name":"系统安装","slug":"系统安装","link":"/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"内网穿透","slug":"内网穿透","link":"/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"数据库安装","slug":"数据库安装","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"},{"name":"SQL语法","slug":"SQL语法","link":"/tags/SQL%E8%AF%AD%E6%B3%95/"},{"name":"docker安装","slug":"docker安装","link":"/tags/docker%E5%AE%89%E8%A3%85/"},{"name":"BUG","slug":"BUG","link":"/tags/BUG/"},{"name":"nextcloud安装","slug":"nextcloud安装","link":"/tags/nextcloud%E5%AE%89%E8%A3%85/"},{"name":"windows使用技巧","slug":"windows使用技巧","link":"/tags/windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"}],"categories":[{"name":"V2","slug":"V2","link":"/categories/V2/"},{"name":"系统安装","slug":"系统安装","link":"/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"内网穿透","slug":"内网穿透","link":"/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"Database","slug":"Database","link":"/categories/Database/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Nextcloud","slug":"Nextcloud","link":"/categories/Nextcloud/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"MariaDB","slug":"Database/MariaDB","link":"/categories/Database/MariaDB/"},{"name":"PostgreSQL","slug":"Database/PostgreSQL","link":"/categories/Database/PostgreSQL/"},{"name":"AngularJs","slug":"前端/AngularJs","link":"/categories/%E5%89%8D%E7%AB%AF/AngularJs/"},{"name":"Docker","slug":"Windows/Docker","link":"/categories/Windows/Docker/"},{"name":"使用技巧","slug":"Windows/使用技巧","link":"/categories/Windows/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"}]}