{"pages":[{"title":"","text":".my-red { color: red; } .my-red-bolder { color: red; font-weight: bolder; } /* 表格全局样式：表头内容强制在一行显示 */ table th { white-space: nowrap; } /* 表格全局样式：鼠标悬浮时该行改变背景色 */ table tr:hover { background: #efefef; }","link":"/scripts/index.css"},{"title":"","text":"console.log(\"title: \", document.title); // 时间控制每隔500毫秒检查当前页面高度以及滚动高度 // window.setInterval(function reinitIframe() { // let iframes = document.getElementsByClassName(\"iframe\"); // for (let i = 0; i < iframes.length; i++) { // const iframe = iframes[i]; // try { // //bHeight 和 dHeight 如果相等，用其一等于iframe.height 即可 // // var bHeight = iframe.contentWindow.document.body.scrollHeight; // var dHeight = iframe.contentWindow.document.documentElement.scrollHeight; // // var height = Math.max(bHeight, dHeight); // iframe.height = dHeight; // } catch (ex) { } // } // }, 500); function onLoadIframe(iframe) { iframe.height = iframe.contentWindow.document.documentElement.scrollHeight; }","link":"/scripts/index.js"},{"title":"","text":"var QRCode;!function(){function t(t){this.mode=r.MODE_8BIT_BYTE,this.data=t,this.parsedData=[];for(var e=0,o=this.data.length;e65536?(i[0]=240|(1835008&n)>>>18,i[1]=128|(258048&n)>>>12,i[2]=128|(4032&n)>>>6,i[3]=128|63&n):n>2048?(i[0]=224|(61440&n)>>>12,i[1]=128|(4032&n)>>>6,i[2]=128|63&n):n>128?(i[0]=192|(1984&n)>>>6,i[1]=128|63&n):i[0]=n,this.parsedData.push(i)}this.parsedData=Array.prototype.concat.apply([],this.parsedData),this.parsedData.length!=this.data.length&&(this.parsedData.unshift(191),this.parsedData.unshift(187),this.parsedData.unshift(239))}function e(t,e){this.typeNumber=t,this.errorCorrectLevel=e,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}t.prototype={getLength:function(t){return this.parsedData.length},write:function(t){for(var e=0,r=this.parsedData.length;e","link":"/scripts/qrcode.min.js"},{"title":"","text":"var _aa={};_aa._ab=function(f,e){var d=qrcode.width;var b=qrcode.height;var c=true;for(var g=0;g=0&&c;g-=2){var a=Math.floor(e[g]);var h=Math.floor(e[g+1]);if(ad||hb){throw\"Error._ab \"}c=false;if(a==-1){e[g]=0;c=true}else{if(a==d){e[g]=d-1;c=true}}if(h==-1){e[g+1]=0;c=true}else{if(h==b){e[g+1]=b-1;c=true}}}};_aa._af=function(b,d,a){var k=new _ac(d);var j=new Array(d","link":"/scripts/llqrcode.js"}],"posts":[{"title":"安装V2","text":"准备工作 国外VPS一只 域名一只，已解析到国外VPS的IP上 安装此处安装V2指的是通过一键脚本安装，V2即v2ray，具体是什么不多说，懂的自然懂。 最好是纯净系统，先更新软件列表、安装BBRPlus版内核，然后安装fail2ban，最后安装V2 更新软件列表索引apt update 安装BBRPlus版内核 BBR加速是谷歌公司研发的TCP拥塞控制算法，可极大的提高网络传输速度，在BBR之后又出来了魔改BBR 和BBRplus 两者在速度上都有很大的提升。特别是国内外物理距离远，出口带宽拥堵，在网络极不稳定的情况下，可提升网络传输速度达20倍！ BBRPlus一键脚本地址: https://github.com/ylx2016/Linux-NetSpeed 123456789101112131415161718# 预先准备# Debian/Ubuntuapt install ca-certificates wget -y &amp;&amp; update-ca-certificates# CentOSyum install ca-certificates wget -y &amp;&amp; update-ca-trust force-enable# 卸载内核并安装新内核，然后重启# 执行命令然后选择：安装 BBRplus版内核# ！！！注意！！!如果安装过程中有弹窗提示则选择 &lt;NO&gt;wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh# 查看内核版本与系统信息cat /proc/version# 启用BBRplus# 执行命令然后选择：使用BBRplus+FQ版加速./tcp.sh 安装fail2ban防止暴力破解Internet网络环境复杂，网上有大量的攻击机器在不断的对全网机器扫描常用端口(22、80、8080、443等)并进行暴力破解，轻则影响机器性能，重则服务被攻击、数据丢失，甚至机器被完全控制，危害极大！ 查看登录日志，可以看到有陌生大量的IP在不断的用各种用户(以root用户最多)和密码在不断的尝试登录，因此有必要对其登录进行限制，尽量避免密码被破解的风险！ 具体的防御措施在此不一一列出，仅针对安装V2的VPS提供一种极为简单的防御办法 — fail2ban一键脚本 SSH暴力破解是指攻击者通过密码字典或随机组合密码的方式尝试登陆服务器（针对的是全网机器），这种攻击行为一般不会有明确攻击目标，多数是通过扫描软件直接扫描整个广播域或网段。 fail2ban是一款实用软件，可以监视你的系统日志，然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作。 fail2ban一键脚本地址: https://github.com/FunctionClub/Fail2ban 1234567891011121314151617181920212223242526# 执行以下命令，然后按提示操作(询问是否修改ssh端口，最大尝试次数，禁用登录时间)，我一般选是，3次，禁用24小时# 这里有一个坑，如果你在之前有多次错误输入密码，fail2ban安装完成后可能会断开连接，无法重连# 说明当前IP被fail2ban禁封了，需要换一个IP登录或进VNC解封当前IPwget https://raw.githubusercontent.com/FunctionClub/Fail2ban/master/fail2ban.sh &amp;&amp; bash fail2ban.sh 2&gt;&amp;1 | tee fail2ban.log# 重启Fail2bansystemctl restart fail2ban# 启动Fail2bansystemctl start fail2ban# 停止Fail2bansystemctl stop fail2ban# 查看状态iptables -L -nfail2ban-client status ssh-iptablesfail2ban-client status sshd# 添加白名单fail2ban-client set ssh-iptables addignoreip IP地址 # 删除白名单fail2ban-client set ssh-iptables delignoreip IP地址# 解禁IP# 被误伤无法ssh登录时，通过VNC后台或者换一个IP登录上去解禁被ban的IP，以下两个命令都要执行fail2ban-client set ssh-iptables unbanip IP地址fail2ban-client set sshd unbanip IP地址 安装V2注意，在依据此教程安装时，请勿选择有CDN标识的安装类型，该教程未给出CDN安装方式的前置教程 需要提前准备： 域名一只 –&gt; DNS解析到当前IP上 V2一键脚本地址: https://github.com/mack-a/v2ray-agent 123# 一键脚本执行安装# 选择项：任意组合安装 --&gt; Xray-core --&gt; 安装类型选 04（VLESS+TCP+xtls-rprx-direct和Trojan） --&gt; 输入域名 --&gt; 使用随机UUID --&gt; 结束wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh","link":"/post/48b5183/"},{"title":"VPS一键脚本重装Linux系统","text":"为什么要使用VPS一键脚本重装系统 商家提供的系统版本有限，没有自己需要的版本 商家的系统安装有自己不想要的服务 所需环境当前架构：KVM/XEN/HYPER-V，不支持OpenVZ当前系统：Debian/Ubuntu/CentOS 如何检测我的VPS服务器是否支持一键DD在Debian/Ubuntu 下安装: apt-get install virt-what执行命令: virt-what只要结果显示为kvm/xen/hyper-v这三个都可以，其他不行。 准备工作12345678910#Debian/Ubuntu:apt-get updateapt-get install -y xz-utils openssl gawk file #RedHat/CentOS:yum updateyum install -y xz openssl gawk file# (可选步骤)国内NAT机需要设置DNSecho nameserver 114.114.114.114 &gt; /etc/resolv.conf 一键脚本安装1234# 国内使用此示例语句(自定义镜像源，安装Debian10x64)bash InstallNET.sh -d 10 -v 64 -a --mirror 'http://mirrors.aliyun.com/debian/' -p &quot;root密码&quot; -port &quot;ssh端口&quot;# 国外使用此示例语句(安装Debian10x64)bash InstallNET.sh -d 10 -v 64 -a -p &quot;root密码&quot; -port &quot;ssh端口&quot; 一键脚本执行后，会断开连接，耐心等待即可，不出意外10分钟左右进行连接即可，如果商家提供了VNC，可以去VNC里查看安装进度。 参数含义： --mirror '镜像地址'：可选参数，自定义镜像地址(国内VPS建议使用国内镜像源) -p &quot;root密码&quot; -port &quot;ssh端口&quot;：可选参数，自定义密码和端口 -d 10 -v 64: 标识安装64位的Debian10 -a/-m: 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示. 对于不能自动获取IP的VPS，还需要添加以下参数： –ip-addr:IP Address /IP地址 –ip-gate:Gateway /网关 –ip-mask:Netmask /子网掩码 以下为默认标准源支持的DD版本，自定义镜像源不一定可用，可以自行替换命令中参数安装，如果输入了其它不支持或不存在的系统版本，则会出现提示中止安装：The version not found in this mirror, Please change mirror 参数 版本 备注 -d 8 -v 64 Debian8x64 -d 9 -v 64 Debian9x64 -d 10 -v 64 Debian10x64 -d 11 -v 64 Debian11x64 -u 12.04 -v 64 Ubuntu12.04x64 -u 14.04 -v 64 Ubuntu14.04x64 -u 16.04 -v 64 Ubuntu16.04x64 -u 18.04 -v 64 Ubuntu18.04x64 -u 20.04 -v 64 Ubuntu20.04x64 -c 6.9 -v 64 CentOS6.9x64 该脚本支持的CentOS最高版本为6.9 注意事项 重装的默认系统源自官方发行版 安装过程全自动进行，无需VNC操作，无需进入救援模式 DD的linux系统安装完成后的默认用户名为root，默认密码为:MoeClub.org 安装完成后，请立即修改远程端口和登录密码！！！ 本教程已通过自测的商家 炭云","link":"/post/604b3f8c/"},{"title":"VPS一键脚本重装Windows系统","text":"为什么要使用VPS一键脚本重装系统 商家提供的系统版本有限，没有自己需要的版本 商家的系统安装有自己不想要的服务 所需环境当前架构：KVM/XEN/HYPER-V，不支持OpenVZ当前系统：Debian/Ubuntu/CentOS 如何检测我的VPS服务器是否支持一键DD在Debian/Ubuntu 下安装: apt-get install virt-what执行命令: virt-what只要显示为kvm/xen/hyper-v这三个都可以，其他不行。 准备工作1234567#Debian/Ubuntu:apt-get updateapt-get install -y xz-utils openssl gawk file #RedHat/CentOS:yum updateyum install -y xz openssl gawk file 一键脚本安装wget --no-check-certificate -qO InstallNET.sh 'https://moeclub.org/attachment/LinuxShell/InstallNET.sh' &amp;&amp; bash InstallNET.sh -dd 'DD镜像直链地址' 请更换以上命令中的“DD镜像直链地址”，一键脚本执行后，会断开连接，耐心等待即可，不出意外10分钟左右进行连接即可，如果商家提供了VNC，可以去VNC里查看安装进度。 对于不能自动获取IP的VPS，还需要添加以下参数： –ip-addr:IP Address /IP地址 –ip-gate:Gateway /网关 –ip-mask:Netmask /子网掩码 如何获取DD包直链地址 目前比较好用的是NATEE大佬制作的DD包，用过的都说好，直链地址：https://dd.nat.ee （如果失效了，请善用搜索） 这个一键安装脚本是萌咖大佬写的，但是萌咖大佬提供的直链已经失效，应该是关站保平安了，可以尝试搜索网友们备份的镜像，但是要注意安全性，小心被人植入了后门 其它大佬制作的DD镜像，请善用搜索 注意事项(必看！！！) 一键脚本执行后一段时间会断开连接，此时可以去VNC里看进度，一键脚本不需要你做任何操作了，如果VNC里需要让你操作选项，大概率是下载镜像失败了，需要退出并重启系统后再执行一键脚本（我有一次尝试了4次才成功），商家没有提供VNC的只能等待了 VNC中如果看到 “Starting graphical installation” 或者类似表达,则表示正在安装，只需要耐心等待安装完成即可 在安装镜像的过程中,不会走进度条(进度条一直显示为0%)，安装完成后会自动启动！！！ 安装完成后，请立即修改远程端口和登录密码！！！ 本教程仅提供了最基础的安装方式，是否适用您的机器请自行搜索、判断与尝试 Windows镜像KMS激活以管理员身份运行CMD执行以下命令(KMS激活服务器地址请善用搜索) 12slmgr /skms 地址slmgr /ato 本教程已通过自测的商家 VIRMACH","link":"/post/2cb6b26a/"},{"title":"内网穿透利器NPS搭建教程","text":"前言本文仅介绍docker安装NPS服务器的方式 准备工作 一台拥有公网IP的服务器、VPS或者NAT服务器 需要内网穿透的电脑、设备 (可选)一台测试机、测试NPS搭建是否成功 注意事项 内网穿透服务器最好使用国内服务器，国外服务器延迟高、可能速度慢、甚至流量大了可能被请喝茶，要慎重 国内服务器一般都要实名认证，请合理合规使用 国内服务器商家提供的系统一般都有带有监控软件，如果要想用的舒适，建议自行重装系统，可参考教程：VPS一键脚本重装Linux系统 本教程仅提供基础安装，进阶使用请自行研究NPS官方文档 NPS介绍NPS官方文档 nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。 正式安装服务端安装 安装docker请参考文章：Linux安装Docker 拉取服务端镜像：docker pull ffdfgdfg/nps 下载并修改配置文件下载conf文件夹并解压，或前往项目主页自行下载 继续阅读官方文档修改配置文件主要修改点如下：1234567891011121314151617# NAT服务器设置为内网ip地址，注意是内网ip地址# 具有公网IP的云服务器设置为公网ip地址http_proxy_ip=xxx.xxx.xxx.xxx# http的默认是 80 端口，如果占用更换为其他http_proxy_port=80# 确保防火墙的 443 端口是开放的https_proxy_port=443# 设置 npc 的启动端口号，即服务端客户端通信端口bridge_port=xxx# web管理页面的账号web_username=admin# web管理页面的密码web_password=123# web管理端口，该端口和上面的 npc 启动端口不能相同，否则访问不到wen管理页面web_port=8080 启动：docker run -d --name nps --net=host -v &lt;本机conf目录&gt;:/conf ffdfgdfg/nps 客户端安装TODO… 以Windows远程桌面为例进行内网穿透TODO…","link":"/post/d14f8d70/"},{"title":"个人向年度推荐","text":"初衷每年年底，记录生活好物 SINCE 2022 2022生活成都-大源夜市推荐理由：成都有很多夜市，推荐这里是因为离我比较近而且摊摊味道都很不错，到晚上人真的超多的…成都的其它夜市总体来说也不错~ 点评：物美价廉！物美价廉！物美价廉！ 其它：如何找一个合适的夜市呢？FIRST，可以在大众点评上搜“夜市”找到夜市。首先就是看距离，离得近可以经常去；然后就是不要太商业化，比如成都建设路小吃街、宽窄巷子那些，本地人就不要去凑热闹了，除非真的住的很近；其次夜市里的摊摊大同小异，可以多吃几个夜市找合适自己的口味。就这样~ 设备meta quest 2购买时间：2022-03-04 购买渠道：亚马逊海外购微信小程序 官方网址：https://www.meta.com/quest/products/quest-2/ 推荐理由：节奏光剑启动器！ 其它说明： 亚马逊海外购从下单到收货花了一个月时间，我买的美版，当时的价格是含税￥2100（$299），现在涨价到大约￥2800（$399）了，早买早享受，晚买冤大头！ 需要魔法激活设备，需要meta账号，没有geek能力的不建议入手！ 游戏很贵！平均要$20一个游戏！不过可以安装网上的学习版，你懂的！ 精品游戏推荐：节奏光剑-beat saber、节奏乒乓球-eleven table tennis 软件TODO.. 其它TODO..","link":"/post/8939fe0b/"},{"title":"在Github Pages上搭建Hexo博客","text":"名词解释 CI/CD: 持续集成 (CI) 和持续部署 (CD) 实现的效果搭建Hexo博客，源文件推送到开发仓库(可以是私有仓库)，生成的静态文件则推送到GitHub Pages，访问username.github.io即可看到效果。 准备工作 了解Markdown、Git、GitHub Pages、SSH Key的含义和基本作用 听说过Hexo博客框架 已在本地安装好Node、Git、VS Code 环境参考 开发环境为Windows 本地Git版本：version 2.33.0.windows.2 Node版本：v14.17.6 官方建议：安装最新版本的Hexo，以及 推荐的 Node.js 版本。 本地安装并启动Hexo执行命令执行命令，然后打开浏览器，输入http://localhost:4000查看效果 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 配置参考及目录结构有能力的建议参考英文文档，中文文档更新不及时，有些教程已经过时或有误。 Hexo官方中文文档 Hexo官方英文文档 Hexo文件目录结构 1234567891011|── node_modules // 外部依赖|── scaffolds // 模版文件夹，当您新建文章时，hexo会根据 scaffold来建立文件。|── source // 资源文件夹，用于放置文章、图片等资源| |── _drafts // 草稿| |── _posts // 已发布文章|── themes // 主题文件夹| |── landscape // hexo官方默认主题|── .gitignore // 指定不纳入git版本控制的文件|── _config.yml // 配置信息，您可以在此配置大部分的参数。|── package.json // 应用程序的信息|── package-lock.json .gitignore 文件配置参考，用于配置Git忽略版本管理的文件或文件夹： 1234567.DS_Store # 用于控制一个文件夹的显示方式（列表、图标、分栏和CoverFlow）和背景图标等Thumbs.db # Windows自动生成的垃圾文件db.json # hexo缓存文件*.log # 日志node_modules/ # 外部依赖public/ # 博客生成的静态文件.deploy*/ # 执行hexo deploy命令部署到Git上的内容目录 推送源代码并部署到GitHub Pages建议采用第一种方案，搞定了后发布文章会变得极为简单，可以专注于文章的编写。 以下两种方案均支持源代码推送到私有仓库中，生成的静态文章则推送到username.github.io仓库中。 GItHub Actions - CI/CDGitHub Actions持续集成服务方案 - 推荐使用此方案 在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。 因此只需要往源文件仓库push更新源文件，GitHub Actions 监控到 push 操作时，就自动拉取源代码并执行 hexo clean、hexo g -d 指令，完成博文发布。 GitHub Actions官方文档: https://docs.github.com/cn/actions/quickstart 注意，项目默认的Action文件是 .github/workflows/分支名称.yml ，如：.github/workflows/main.yml，如果项目中包含该文件，则会在push代码后自动执行workflows。 这里我们直接使用sma11black开发好的GitHub Actions脚本，请先看此教程。 新建源代码仓库和GitHub Pages仓库 在GitHub上新建源代码仓库((可以是私有仓库，GitHub允许用户免费持有一个私有仓库) GitHub Pages仓库名称必须为：username.github.io，如：hormones.github.io 生成SSH Key在cmd下输入ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C &quot;你的邮箱&quot;生成公钥和私钥，生成的公钥与私钥位于当前用户家目录的.ssh文件夹中（可在cmd下输入echo %USERPROFILE%查看当前系统用户目录），私钥文件名为id_rsa，公钥文件名为id_rsa.pub 将生成的私钥作为私有仓库下Settings &gt; Secrets 下的一个名叫 DEPLOY_KEY 的 Secret。注意：需要复制私钥中的整个内容。Secret 相当于一个变量，可以使私有变量不公开。 将生成的公钥作为公有仓库下 Settings &gt; Deploy Keys 的 Deploy Key。Deploy Keys 中的公钥针对于当前仓库。 为什么要用 SSH Key？ SSH Key，是一对密匙：公钥+私钥，用于加密本地仓库和远程仓库的传输内容。是非对称加密，可公钥加密、私钥解密；或私钥加密、公钥解密。 使用 GitHub Actions 是借助 GitHub 提供的环境，跟本地环境一样，也需要有私钥。当 GitHub Action 执行 hexo g -d 时，用私钥 DEPLOY_KEY 加密，GitHub 用网站文件仓库的 Deploy Key 进行验证。 新建GitHub Actions配置文件如果源代码分支名为main，则新建配置文件.github\\workflows\\main.yml，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 用于Guthub Actions持续集成name: Deployon: [push]# 如无特别需求，理论上只需要需改此处的环境变量env: GIT_USER: yourname # 修改为你的用户名 GIT_EMAIL: xxx@xxx.com # 修改为你的邮箱jobs: build: runs-on: ubuntu-latest name: A job to deploy blog. steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true # Checkout private submodules(themes or something else). # 缓存依赖项以加快workflows（GitHub将删除任何超过7天未访问的缓存条目） - name: Cache node modules uses: actions/cache@v2 id: cache with: path: node_modules key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-node- - name: Install Dependencies if: steps.cache.outputs.cache-hit != 'true' run: npm ci # 部署 hexo 博客网站 - name: Deploy id: deploy uses: sma11black/hexo-action@v1.0.4 with: deploy_key: ${{ secrets.DEPLOY_KEY }} # 这就是私钥变量 user_name: ${{ env.GIT_USER }} # (or delete this input setting to use bot account) user_email: ${{ env.GIT_EMAIL }} # (or delete this input setting to use bot account) commit_msg: ${{ github.event.head_commit.message }} # (or delete this input setting to use hexo default settings) # Use the output from the `deploy` step(use for test action) - name: Get the output run: | echo &quot;${{ steps.deploy.outputs.notify }}&quot; Hexo设置 安装 hexo-deployer-git: npm install hexo-deployer-git --save 修改配置文件.config.yml 123456deploy: type: git # 由于我们使用SSH KEY获取代码权限，则必须要注意路径为ssh格式，如下例所示 repo: &lt;repository url&gt; # 例：git@github.com:用户名/仓库名称.git branch: [branch] # 分支名称 # message: [message] # 提交到github pages的注释，建议注释掉 提交代码提交代码后，将会触发Gtihub Actions，此时可以去GitHub上查看效果 123456789101112131415# 先初始化用户名和邮箱git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@yyy.com&quot;# 初始化本地仓库git init# 将文件全部添加到待提交git add .# 执行提交，提交到本地仓库git commit -m 输入本次提交的注释# 关联github仓库git remote add origin 这里替换成你的仓库地址# github新建的仓库主版本已更改为main，原来是master...# 如果之前使用过github，则不会要求登录，如要求登录，按指引操作即可git push -u origin main 访问usernme.github.io查看效果手动构建并推送这种方案很原始很low，建议使用持续集成服务方案（其实持续集成服务就是程序自动帮你做了一些指令操作而已，时间多的可以先尝试一次手动构建，可以加深对持续集成服务的理解，然后再替换成CI/CD） 上传源代码到仓库 在GitHub上新建源代码仓库((可以是私有仓库，GitHub允许用户免费持有一个私有仓库) cmd到工作目录下，输入以下命令后，刷新GitHub，即可看到上传的文件 123456789101112131415# 先初始化用户名和邮箱git config --global user.name &quot;xxxxx&quot;git config --global user.email &quot;xxx@yyy.com&quot;# 初始化本地仓库git init# 将文件全部添加到待提交git add .# 执行提交，提交到本地仓库git commit -m &quot;输入本次提交的注释&quot;# 关联github仓库git remote add origin 这里替换成你的仓库地址# github新建的仓库主版本已更改为main，原来是master...# 如果之前使用过github，则不会要求登录，如要求登录，按指引操作即可git push -u origin main 手动构建静态文件并上传到GitHub Pages 在GitHub上新建公有仓库 注意：公有仓库名称必须为：username.github.io,如：hormones.github.io 安装hexo-deployer-git npm install --save hexo-deployer-git 在_config.yml配置如下： 123456deploy: type: git # example, https://github.com/hexojs/hexojs.github.io repo: https://github.com/&lt;username&gt;/&lt;project&gt; branch: [branch] # 分支名称 message: [message] # 提交到GitHub Pages的注释，可选配置，可以注释掉 运行hexo clean &amp;&amp; hexo deploy。 访问username.github.io查看效果 拉取源代码到新的工作目录有时候需要在另外一台电脑上写博客并发布，因此需要拉取仓库中代码下来。 12345678# cmd到工作空间下，执行以下命令(无需提前创建项目目录，会自动生成)git clone 这里替换成你的仓库地址# 安装hexonpm install hexo-cli -g# 安装项目依赖：下载完成后，cmd进入项目空间，执行以下命令npm install# 查看效果hexo server SEO优化生成 sitemap 站点地图 站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 Google 等搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。 先安装谷歌的插件：npm install hexo-generator-sitemap --save 在博客根目录的_config.yml中改url为你的站点地址并添加代码： 1234567# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://username.github.io/# add sitemapsitemap: path: sitemap.xml 发布到博客后可以通过https://username.github.io/sitemap.xml查看该文件。 添加 robots.txtrobots.txt是搜索引擎蜘蛛协议，告诉引擎哪些要收录，哪些禁止收录。 source文件夹下新建robots.txt，内容如下: 123456789101112User-agent: *Allow: /Allow: /categories/Allow: /tags/Allow: /archives/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://username.github.io/sitemap.xml hexo-abbrlink 链接持久化大家知道Hexo默认的链接是http://xxx.yyy.com/2018/07/14/hello-world这种类型的，这源于站点目录下的配置_config.yml里的配置:permalink: :year/:month/:day/:title/，这种默认配置的缺点就是一般文件名是中文，导致url链接里有中文出现，这会造成很多问题，如使用gitment，也不利于 SEO，另外年月日都会有分隔符。 hexo-abbrlink这个插件，只要不修改md文件的abbrlink的值， url就永久不会改变。如此md文件名和文件内容也可以随便改了。后面的层级更短，这样也有利于SEO优化。 安装：npm install hexo-abbrlink --save _config.yml配置： 1234permalink: post/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 参考链接 使用 GitHub Actions 实现 Hexo 博客自动部署","link":"/post/be2d3818/"},{"title":"安装MariaDB","text":"Docker方式安装1234567891011121314151617181920212223242526272829303132# 搜索mariadb镜像docker search mariadb# 下载docker镜像docker pull mariadb# 查看本地已有的所有镜像docker images# 建一个目录作为和容器的映射目录mkdir -p /data/mariadb/data# 启动mariad镜像# PS: 删除容器后，重新创建容器前，需要先删除映射目录下的文件(网上有人说的，未验证)# PS: ！！！坑，环境变量中的密码如果包含#$等特殊字符可能会导致创建的用户初始密码有问题，无法登录！！！docker run --name mariadb -p 23306:3306 \\-e MARIADB_ROOT_PASSWORD=123456 \\-e MARIADB_USER=mock \\-e MARIADB_PASSWORD=123456 \\-e MARIADB_DATABASE=mock \\-v /data/mariadb/data:/var/lib/mysql \\--restart=always \\-d mariadb# 查看运行容器docker ps -a # 进入容器docker exec -it mariadb bash# 在容器内登录数据库mysql -uroot -p密码","link":"/post/a5f4d61c/"},{"title":"MariaDB-常用语法","text":"1234567891011# 新建用户并赋权超级管理员权限GRANT ALL PRIVILEGES ON *.* TO 'ethan'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;# 新建数据库和用户并赋予数据库权限CREATE DATABASE nextcloud;GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;# 查看当前用户权限show grants;# 查看指定用户权限show grants for 'nextcloud'@'%';# 修改密码SET PASSWORD FOR 'nextcloud'@'%' = PASSWORD('123456');","link":"/post/11d39c94/"},{"title":"安装PostgreSQL","text":"Debian安装PostgreSQL1312345678910111213141516171819202122232425262728293031323334353637383940414243444546# 更新系统及其软件包并重启apt updateapt -y upgradereboot# 添加PostgreSQL存储库apt updateapt -y install gnupg2wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -# 创建文件pgdg.list并新增内容vim /etc/apt/sources.list.d/pgdg.list# 新增内容deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main# 安装PostgreSQLapt updateapt -y install postgresql-13 postgresql-client-13# 修改监听端口(可选，要保证端口已放开)# 修改监听地址并设置可外网访问vim /etc/postgresql/13/main/postgresql.conf# 修改以下内容listen_addresses = '*'port = 端口号# 修改访问验证方式vim /etc/postgresql/13/main/pg_hba.conf# 新增内容host all all 0.0.0.0/0 md5# 启动数据库服务器pg_ctlcluster 13 main start# 查看服务状态pg_ctlcluster 13 main statussystemctl status postgresql@13-main.service# 切换到用户postgressu - postgres# 进入psql控制台psql ?database# 列出数据库psql -l# 退出psql控制台\\q","link":"/post/2013339e/"},{"title":"PostgreSQL-常用语法","text":"常用语法12# 新建用户CREATE USER xxx WITH PASSWORD '***'; 12# 新建数据库CREATE DATABASE yyy OWNER xxx; 12# 数据库赋权GRANT ALL PRIVILEGES ON DATABASE yyy TO xxx;","link":"/post/65028c1f/"},{"title":"Linux安装Docker","text":"前言注意：Debian10x64已通过自测，Ubuntu和CentOS暂未自测，此处仅做记录备用 安装前必读Linux 内核：官方建议 3.10 以上 注意：本文的命令使用的是 root 用户登录执行，不是 root 的话所有命令前面要加 sudo 准备工作 查看当前的内核版本，命令：uname -r Docker 对Linux 内核版本的最低要求是3.10，如果内核版本低于3.10 会缺少一些运行Docker 容器的功能。 更新软件包 12345# Debian/Ubuntuapt update# CentOSyum update 卸载旧版本（如果之前安装过的话） 1234567# Debian/Ubuntuapt remove docker docker-engine docker.io containerd runc# CentOSyum remove docker docker-client docker-client-latest \\ docker-common docker-latest docker-latest-logrotate \\ docker-logrotate docker-engine 安装Docker 添加使用 HTTPS 传输的软件包以及 CA 证书 12345# Debian/Ubuntuapt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common lsb-release# CentOSyum install -y yum-utils device-mapper-persistent-data lvm2 设置源，添加软件源的 GPG 密钥 1234567891011121314# Debian - 阿里源，适用于国内服务器curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | apt-key add -# Debian - 官方源，适用于国外服务器curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -# Ubuntu - 阿里源，适用于国内服务器curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -# Ubuntu - 官方源，适用于国外服务器curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -# CentOS - 阿里源，适用于国内服务器yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# CentOS - 官方源，适用于国外服务器yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 将 Docker 版本库添加到APT源 1234567891011# Debian - 阿里源，适用于国内服务器add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian $(lsb_release -cs) stable&quot;# Debian - 官方源，适用于国外服务器add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;# Ubuntu - 阿里源，适用于国内服务器add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;# Ubuntu - 官方源，适用于国外服务器add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;# CentOS - 无需此步骤 用新添加的 Docker 软件包来进行升级更新 12345# Debian/Ubuntuapt update# CentOSyum update 确保要从Docker repo而不是默认的Debian repo安装(CentOS无需此步骤) 12# Debian/Ubuntuapt-cache policy docker-ce 安装 Docker 1234567891011121314151617# Debian/Ubuntu - 安装最新版apt install docker-ce# Debian/Ubuntu - 列出可用的版本号并安装指定版本# 例：apt install docker-ce=18.03.0ce-0ubuntuapt-cache madison docker-ceapt install docker-ce=&lt;VERSION&gt;# CentOS - 安装最新版# 请接受此指纹: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35yum install docker-ce docker-ce-cli containerd.io# CentOS - 列出可用的版本号并安装指定版本# 例：yum install -y docker-ce-19.03.11 docker-ce-cli-19.03.11 containerd.ioyum list docker-ce --showduplicates | sort -ryum install -y docker-ce-&lt;VERSION&gt; docker-ce-cli-&lt;VERSION&gt; containerd.io 启动Docker(Debian/Ubuntu无需此步骤) 12# CentOSsystemctl start docker 检查 Docker 是否安装成功 12# Debian/Ubuntu/CentOSdocker -v 修改镜像源以提升镜像拉取速度 国内服务器大概率无法pull镜像，通过VIM编辑文件，添加以下内容： 1234{ &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;,&quot;https://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [&quot;10.0.0.12:5000&quot;]} 修改镜像源命令如下： 12345# Debian/Ubuntu/CentOSvim /etc/docker/daemon.json# vim后重启docker服务systemctl restart docker","link":"/post/96e9ca9a/"},{"title":"nextcloud安装","text":"docker方式安装1234567891011121314151617181920212223242526272829// 安装Mysqldocker pull mysqldocker run --name=mysql -e MYSQL_ROOT_PASSWORD=123456 -d -p 3306:3306 --restart=always mysql//创建nextcloud数据库：docker exec -it mysql mysql -u root -pCREATE DATABASE nextcloud;GRANT ALL ON *.* TO 'root'@'%';flush privileges;exit;// 安装Nextclouddocker pull nextcloud// 简单解释// -v /D/nextcloud/data:/var/www/html/data 目录映射到宿主机，注意要先创建好本机的目录// --link mysql:db 关联Mysqldocker run -d -p 9999:80 --name=nextcloud --link mysql:db \\-v /D/nextcloud/data:/var/www/html/data \\-v /D/nextcloud/config:/var/www/html/config \\-v /D/nextcloud/custom_apps:/var/www/html/custom_apps \\-v /D/SData:/SData \\--restart=always nextcloud// 打开页面初始化nextcloud: localhost:9999// 额外：手动添加文件到用户目录下// 执行命令更新nextcloud数据库扫描新添加的文件docker exec --user www-data nextcloud php occ files:scan --all docker-compose方式安装docker-compose基础命令 12docker-compose up -ddocker-compose down docker-compose.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: '2'# 必看！！！ 宿主机必须先创建好映射目录services: mysql: container_name: mysql image: mysql restart: always ports: - 3306:3306 volumes: - /D/nextcloud/mysql:/var/lib/mysql environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=123456 networks: - net188# mariadb: # 使用mariadb会报错，原因未知# container_name: mariadb# image: mariadb# restart: always# ports:# - 3306:3306# volumes:# - /D/nextcloud/mariadb:/var/lib/mysql# environment:# - TZ=Asia/Shanghai# - MYSQL_ROOT_PASSWORD=123456# command: 'mysqld --innodb-flush-method=fsync'# networks:# - net188 nextcloud: container_name: nextcloud image: nextcloud restart: always depends_on:# - mariadb - mysql volumes: - /D/nextcloud/data:/var/www/html/data - /D/nextcloud/config:/var/www/html/config - /D/nextcloud/custom_apps:/var/www/html/custom_apps - /D/SData:/SData ports: - 9999:80 networks: - net188networks: net188: driver: bridge ipam: driver: default config: - subnet: 192.188.1.0/24 gateway: 192.188.1.1","link":"/post/be34c0d/"},{"title":"前后端数据交互混合加密方案","text":"前后端数据交互混合加密方案需求：前后端数据交互时，要求接口请求参数和响应参数都需要做数据加密处理，且在传输过程中即使密文被拦截，也无法破解。(其它情况举一反三，自行斟酌最佳加密方案) 双向加密算法介绍加密算法首先分为两种：单向加密、双向加密。单向加密是不可逆的，也就是只能加密，不能解密。双向加密是可逆的，也就是说可以解密出原文，而双向加密算法一般分为对称性加密算法和非对称性加密算法。 对称性加密算法在对称加密算法中，加密和解密使用的是同一把钥匙，即：使用相同的密匙对同一密码进行加密和解密。也称为单密钥加密。 加解密过程如下： 加密：原文 + 密匙 = 密文 解密：密文 + 密匙 = 原文 优点：算法简单，加密解密容易，效率高，执行快。 缺点：在数据传送前，发送方和接收方必须商定好秘钥，相对来说不算特别安全，只有一把钥匙，密文如果被拦截，且密钥也被劫持，信息很容易被破译。密钥管理也成为双方的负担。 几种常见的对称性加密算法： DES：已破解，不再安全，基本没有企业在用了。是对称加密算法的基石，具有学习价值。密钥长度56（JDK）、56/64（BC）。 3DES：早于AES出现来替代DES。计算密钥时间太长、加密效率不高，所以也基本上不用。密钥长度112/168（JDK）、128/192（BC） AES：最常用的对称加密算法，密钥建立时间短、灵敏性好、内存需求低。实际使用中，使用工作模式为CTR（最好用BC去实现），此工作模式需要引入IV参数（16位的字节数组）。密钥长度128/192/256，其中192与256需要配置无政策限制权限文件（JDK6）。填充模式最常用的两种PKCS5Padding和PKCS7Padding，其中后者只有BC独有。 IDEA：常用的电子邮件加密算法，工作模式只有ECB，密钥长度128位。 非对称性加密算法非对称加密有两个钥匙，公钥（Public Key）和私钥（Private Key）。公钥和私钥是成对的存在，如果对原文使用公钥加密，则只能使用对应的私钥才能解密；私钥只能由一方保管，不能外泄。公钥能够交给任何请求方。因为加密和解密使用的不是同一把密钥，所以这种算法称之为非对称加密算法。 加解密过程如下： 加密：原文 + 公钥 = 密文 解密：密文 + 私钥 = 原文 优点：安全性高，即使密文被拦截、公钥被获取，但是无法获取到私钥，也就无法破译密文。作为接收方，务必要保管好自己的私钥。 缺点：加密算法及其复杂，安全性依赖算法与密钥，而且加密和解密效率很低。 几种常见的非对称加密算法：RSA、DSA、ECC 几种常见的非对称性加密算法： RSA：为提高保密强度，RSA密钥至少为500位长，一般推荐使用1024位。这就使加密的计算量很大。RSA是被研究得最广泛的公钥算法，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的加密方案之一。RSA 即可作为数字签名，也可以作为加密算法。不过作为加密使用的 RSA 有着随密钥长度增加，性能急剧下降的问题。 DSA：DSA 只能用于数字签名，而无法用于加密（某些扩展可以支持加密）；在业界支持方面，RSA 显然是赢家。RSA 具有更为广泛的部署与支持。 ECC：椭圆曲线算法（Elliptic Curves Cryptography），与其他非对称加密算法相比ECC算法具有安全性更高(160位ECC已经与1024位RSA、DSA有相同的安全强度)、密钥短、计算量小、处理速度快、存储空间占用小、带宽要求低，在私钥的处理速度上（解密和签名），ECC远比RSA、DSA快得多等优势。由于椭圆曲线算法的优点，使其取代 RSA/DSA 而成为新一代通用的非对称加密算法成为可能。 为什么要使用混合加密方案？我们先看看单一加密方案的缺点: 使用对称性加密算法对接时需要把秘钥告知对方，而前端获取秘钥和保存秘钥，或者用接口传输秘钥，均可以轻易被获取。 使用非对称加密算法后端提供接口和私钥、公钥。对接时需要把公钥告知前端，因为私钥不能提供给前端，所以只能做到请求参数加密传输。因为没有私钥，所以无法解密响应参数。 使用混合加密方案：对称性加密算法+非对称加密算法 用对称加密算法加密业务数据，用非对称加密算法加密对称加密算法的秘钥，以AES+RSA混合加密方案为例： 后端提供接口和RSA的私钥A、公钥B，通过接口提前将公钥传输给前端； 前端生成临时的随机的AES秘钥，调用接口时，将AES加密的数据和通过RSA加密的AES秘钥传输给后端，例：{encryptData: “AES加密的请求数据”, “encryptAESKey”: “RSA加密的AES秘钥”}； 后端拿到加密数据和AES秘钥后，先通过RSA私钥解密AES秘钥，再通过AES秘钥解密数据得到请求数据原文，然后进行业务处理； 后端返回数据时，使用前端提供的AES秘钥加密响应数据返回给前端 前端用AES秘钥解密数据得到响应数据原文。 常见混合加密方案推荐：RSA+AES、ECC+AES 其它JAVA生成RSA秘钥12345678910111213141516171819202122232425262728293031323334package com.example.rsa.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.security.KeyPair;import java.security.KeyPairGenerator;import java.security.NoSuchAlgorithmException;import java.util.Base64;public class RSAUtils { private static final Logger logger = LoggerFactory.getLogger(RSAUtils.class); // 加密算法 RSA public static final String KEY_ALGORITHM = &quot;RSA&quot;; // RSA 位数 private static final int INITIALIZE_LENGTH = 1024; public static void generateRSAKey() { try { KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM); keyPairGenerator.initialize(INITIALIZE_LENGTH); KeyPair keyPair = keyPairGenerator.generateKeyPair(); String publicKey = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()); logger.info(publicKey); String privateKey = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded()); logger.info(privateKey); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } }} 前端使用CryptoJs做AES加解密1234567891011121314151617181920212223242526272829303132333435var aesKey = getAESKey();var parseKey = CryptoJS.enc.Utf8.parse(aesKey);// /AES/CBC/Pkcs7Paddingvar iv = CryptoJS.enc.Utf8.parse(&quot;1234567812345678&quot;);var mode = CryptoJS.mode.CBC;var padding = CryptoJS.pad.Pkcs7;// 随机生成16位的aesKeyfunction getAESKey() { let key = []; for (let i = 0; i &lt; 16; i++) { let num = Math.floor(Math.random() * 26); let charStr = String.fromCharCode(97 + num); key.push(charStr.toUpperCase()); } return key.join('');};// AES 数据加密function encryptAES(value) { return CryptoJS.enc.Base64.stringify(CryptoJS.AES.encrypt(value, parseKey, { iv: iv, mode: mode, padding: padding }).ciphertext);};// AES 数据解密function decryptAES(value) { return CryptoJS.enc.Utf8.stringify(CryptoJS.AES.decrypt(value, parseKey, { iv: iv, mode: mode, padding: padding })).trim();};","link":"/post/5a8089c3/"},{"title":"工具箱","text":"二维码生成与解析 图片转BASE64","link":"/post/c06de4d5/"},{"title":"Win10专业版与企业版安装Docker","text":"前言 WSL2版的docker资源占用高解决方案，在你的%USERPROFILE% 即C:\\Users\\用户名, 创建一个 .wslconfig 文件，注意前面有个点，添加内容如下: 12345678910111213[ws12]memory=4GBswap=0processors=2localhostForwarding=trueswapFile=%USERPROFILE%\\AppData\\Local\\Temp\\swap_ws12.vhdx[ws1]memory=1GBswap=512MBprocessors=2localhostForwarding=trueswapFile=%USERPROFILE%\\AppData\\Local\\Temp\\swap_ws1.vhdx 开启Hiper-V 控制面板 –&gt; 程序 –&gt; 启用或关闭Windows功能 –&gt; 开启Hiper-V –&gt; 重启 下载docker for windows并无脑安装 下载地址：https://hub.docker.com/editions/community/docker-ce-desktop-windows 安装完成后，Docker 会自动启动。通知栏上会出现个小鲸鱼的图标，这表示 Docker 正在运行。 如果启动中遇到因 WSL 2 导致地错误，请安装 WSL 2。 安装好后，打开DOS窗口检测是否安装成功 docekr --version","link":"/post/efc6dd70/"},{"title":"Win10开机自动登录的方法","text":"可以通过设置注册表，让Win10开机自动输入用户名和密码登录。方法如下： 按WIN+R键，输入regedit打开注册表编辑窗口 依次点开：HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon 修改(没有则添加)4个字符串参数： AutoAdminLogon：是否自动登录，1：是；0：否（设置成1） DefaultUserName：登录用户名 DefaultPassword：登录密码 DefaultDomainName：登录域名（没有域可以不设置） 设置完成后，重启电脑可以看到会自动登录了","link":"/post/4fd78014/"},{"title":"低版本AngularJs(1.2.12及以下)输入中文完成后不触发ng-model的问题","text":"问题描述当使用的AngularJs版本低于1.2.13时，使用输入法输入中文无法触发ng-model的双向绑定，此时必须再键入其它任意字符或者使输入框失去焦点，才能正确获取到ng-model的绑定值。这会对某些使用场景造成一些困扰，如搜索关键字自动补全，列表即时过滤等。 环境说明 AngularJs版本：1.2.12及以下 chrome浏览器版本：65.0.3325.181（正式版本） （64 位） 解决方案1. 更换angualrJs版本到1.2.13或以上1.2.13及以上版本已修复该BUG。对一个庞大的项目或者老项目来说，贸然更换版本有一定的风险，可能会导致已完成开发功能点不可用，应确保有合格且全面的测试以发现问题并修复，保障线上运行时不会出错。注意：在更换AngularJs版本时，要考虑到AngularJs相关插件的版本同步更新。 2. 修改源码AngularJs会为添加了ng-model指令的输入框绑定一系列监听，当input输入框类型为text时，绑定监听的方法为textInputType在textInputType方法中，绑定了compositionstart、compositionend、input的事件监听，这就是对中文输入等非直接输入的监听事件(具体作用可自行搜索)，代码如下所示: 12345678910111213141516171819202122232425262728293031323334353637function textInputType(scope, element, attr, ctrl, $sniffer, $browser) { var composing = false; element.on('compositionstart', function() { composing = true; }); element.on('compositionend', function() { composing = false; }); var listener = function() { // composing为true时，直接return，不执行listener if (composing) return; var value = element.val(); if (toBoolean(attr.ngTrim || 'T')) { value = trim(value); } if (ctrl.$viewValue !== value) { scope.$apply(function() { ctrl.$setViewValue(value); }); } }; if ($sniffer.hasEvent('input')) { element.on('input', listener); } else { // 其它代码在此省略 ... } // 其它代码在此省略 ...} 按代码逻辑来看，预想的是：在键入中文时，触发compositionstart，将composing值修改为true，输入完成触发compositionend，将composing值修改为false，然后触发input，执行listener，完成双向绑定。理想触发顺序为 compositionstart --&gt; compositionend --&gt; input --&gt; 执行listener但是在chrome浏览器中，由于浏览器机制问题，实际触发顺序为： compositionstart --&gt; input --&gt; 执行listener(实际并未执行)--&gt; compositionend因此，针对chrome浏览器，我们需要在触发compositionend后，才执行listener，所以，我们可以直接在compositionend方法内部调用listener: 1234element.on('compositionend', function() { composing = false; listener();}); 实际上，1.2.13及以上版本就是这么做的。 3. 自定义指令在某些特殊情况下，如果更换版本、修改源码均不可行，可以考虑自定义指令实现ng-model相同的功能。 4. 更换浏览器。。。","link":"/post/eaffb42e/"},{"title":"西游记86英文版名称物品中英对照","text":"唐僧师徒 中文 英文 唐僧 Tang Priest、Reverend Tripitaka（三藏法师）、Golden Cicada（金蝉子）、Mr. Tang、Candana-Punya Buddha（旃檀功德佛、论坛功德佛） 孙悟空 Sun Wukong、Handsome Monkey King（美猴王）、the Monkey King、Great Sage（大圣）、Great Sage Equaling Heaven (齐天大圣)、Stable Minister（弼马温）、Monkey Sun、Monkey Prince（行者孙）、Sun the Novice、Mr. Sun、Grandpa Sun（孙爷爷）、Victorious Fighting Buddha（斗战胜佛） 猪八戒 Pigsy、Marshal Tianpeng（天蓬元帅）、Zhu Ganglie（猪刚鬣）、Zhu Wuneng（猪悟能）、Eight Prohibititions（八戒）、Mr. Zhu、Alter Cleanser (净坛使者) 沙和尚 Sandy、the Great Curtain-Lifting General（卷帘大将）、Mr. Sha、Golden Arhat（金身罗汉） 白龙马 White Dragon Prince、Heavenly Dragon of the Eight Classes（八部天龙） 第一集 猴王初问世 猴王初问世 The monkey king comes into the world 傲来国 Aolai Country 花果山 Flower and Fruit Mountain 水帘洞 WaterFull Cave 天庭 Hall of Miraculous Mist 南瞻部洲 Southern Jambu Comtinent 灵台方寸山，斜月三星洞 Moon Cave, Spirit Mountain 菩提祖师 Patriarch Subhuti 天外仙宗 Celestial Immortal Sect 筋斗云 Somersaulting 师父 master 徒弟 disciple 第二集 官封弼马温 官封弼马温 Being Appointed Protector of the Heavenly Horses 混世魔王 Demon king of Chaos 牛魔王 Bull Demon King 独角鬼王 Single Horned Demon King 东海龙宫 Dragon Palace of the Eastern Sea 东海龙王 Dragon King of the Eastern Sea 如意金箍棒 At-Will Gold-Banded Staff、the Tide Control Pillar（定海神针） 阴曹地府 the Land of Darkdarkness 生死簿 Register of Souls 太白金星 Great White Planet 玉帝 Jade Emperor 灵霄宝殿 Golden-Gated Cloud Palace 天河 Milky Way 天蓬元帅 Marshal Tianpeng 武曲星君 Star Lord Wuqu 托塔天王李靖 Heavenly King Li 降魔大元帅 Demon-Quelling Marshal 哪吒 Nezha 第三集 大圣闹天宫 大圣闹天宫 Great Sage creates havoc in the Heavenly Palace 天宫 Heavenly Palace 巨灵神 Mighty Miracle God 大圣府 Great Sage Manor 蟠桃园 Peach Orchard 土地神 Local God 王母娘娘 the Queen Mother 蟠桃盛会 Peach Banquet 西天佛祖 The Buddha of the Western Heaven 五百罗汉 the five hundred Arhats 文殊菩萨 Manjusri Bodhisattvas 普贤菩萨 Samantabhadra Bodhisattvas 灵吉菩萨 Lingji Bodhisattvas 福星 禄星 寿星 Star Loads of the Constellation 镇元大仙 the Great Immortal Zhen Yuan 太乙真人 True Man Monad 赤脚大仙 Barefoot Immortal 通明殿 Hall of Universal Brightness 瑶池 Jade Pool 兜率宫 Tushita Palace 太上老君 Load Lao Zi 南海观音 Bodhisattva Guanyin of the Southern Sea 二郎真君 True Lord Er’lang 二郎神 God Er’lang 灌江口二郎神庙 ErLang`s Manor on GuanJiangKou 金刚圈 The Diamond Ring 玲珑塔/镇妖塔 Demon-Beheading Tower 八卦炉 Eight Trigrams Furnace 三昧真火 Three Essence Fire 第四集 困囚五行山 困囚五行山 Imprioned under the Five Elements 五指山 the Five Elements Mountain 佛祖 the Load Buddha 六字真言 唵(ong)、 嘛(ma)、 呢(ni) 、叭(bei) 、咪(mei) 、吽(hòng) Om Mani Padme（Lord Buddha`s Golden World） 阿弥陀佛 Amitabha 长安城 Chang`an City 化生寺 Huasheng Temple 太宗皇帝 Emperor Taizong 陈光蕊 Chen Guang’rui 刘洪 Liu Hong 袈裟与九环法杖 Cassock and Monastic（nine-ringed staff） 光明殿 Palace of Great Brightness 小乘教法 the Little Vehicle 大乘教法 the Great Vehicle 雷鸣寺 Thunder Monastery 第五集 猴王保唐僧 猴王保唐僧 Escorting Tang Priest 两界山 Double Boundary Mountain 黄石公 Lord Yellow Stone 张良 Zhang Liang 汉朝 Han Dynasty 鹰愁涧 Eagle’s Gorge 西海龙王 Dragon King of the Western Sea 夜明珠 Luminous Pearl 紧箍咒 Band-Squeezing Spell、Band-Tightening Spell 第六集 祸起观音庙英文版字幕坏了，是小的无能… 祸起观音庙 Trouble from the Guanyin Monastery 观音庙 Guanyin Monastery 黑熊精 Black Bear Demon 金池长老 广智师父 广目天王 辟火罩 黑风山 黑风洞 佛衣会 珞珈山 第七集 计收猪八戒 计收猪八戒 Capturing Pigsy with Tricks 高老庄 Gao Manor 翠兰 Cuilan 高才 Gao Cai 高老爷 Lord Gao 福陵山 Mount Blessing 云栈洞 Cloud Pathway Cave 九天荡魔祖师 Demon-Smiting Spirit 嫦娥 Moon Godness 第八集 坎坷逢三难 坎坷逢三难 Overcoming Three Disasters on Their Rough Way 定风桩 Wind-Guiding Pillar 黄风洞 Yellow Wind Cave 峨眉山 Mountain Ermei 文殊菩萨 Bodhisattva Manjusri 三花九籽膏 Three-Flower Nine-Seed Ointment 三昧神风 Divine Samadhi Wind 灵吉菩萨 Bodhisattva Lingji 定风丹 Wind Settler 灵鹫山 Vulture Peak 流沙河 Flowing Sands River 慧岸行者 Hui’an the Novice 卷帘大将 the Great Curtain-Lifting General 普陀珞珈山 Potaraka Island in the Southern Sea 黄风岭 Yellow Wind Ridge 第九集 偷吃人参果 偷吃人参果 Stealing the Manfruit 人参果 Manfruit、Grass Cinnabar（草还丹） 青天弥罗宫 Heaven of Superme Purity 元始天尊 Primeval Lord of Heaven 明月清风 Bright Moon and Pure Wind 金蝉子 Golden Cicada 五庄观 Wuzhuang Temple 三清 the Three Pure Ones 四帝 the Four Emperors 九药心君 the Nine Bright Stars 五行 the Five Elements 万寿山 the Mountain of Infinite Longevity 龙皮七星鞭 Seven-Star Dragon-Skin Whip 镇元大仙 the Great Immortal Zhen Yuan 第十集 三打白骨精 三打白骨精 Beating Lady White Bone Three Times 白骨精 Lady White Bone 黑狐精 Black Fox Spirit 老虎岭 Tiger Ridge 松箍咒 Band-Loosening Spell 第十一集 智激美猴王 智激美猴王 Monkey King is Prodded into Action Moon Water Cave 宝象国 Elephantia kingdom 百花羞公主 Princess Blossom 黄袍怪 Yellow Robe Demon 波月庄 Moon Waters Manor 碗子山 Bowl Mountain 奎木狼 Wooden wolf 第十二集 夺宝莲花洞 智激美猴王 Treasures Recovered in Lotus Cave 莲花洞 Lotus Cave 精细鬼 Dexterous Ghost 伶俐虫 Skillful Beast 紫金红葫芦 Gold Gourd 羊脂玉净瓶 White Jade Vase 山神 Mountain God 蓬莱山 Mountain Penglai 哪吒王子 Prince Nezha 孙行者 Monkey King 者行孙 Monkey Sun 行者孙 Monkey Prince 幌金绳 Dazzling Gold Cord 压龙洞 Crushed Dragon Cave 太上老君 Lord Lao Zi 昆仑山 Mountain Kunlun 银角大王 Silver Horn 金角大王 Gold Horn 第十三集 除妖乌鸡国 除妖乌鸡国 Eliminating the Monster in Wuji Kingdom 皇家寺院 Imperial Monastery 宝林禅寺 Royal Monastery of Wuji Kingdom、Wuji Royal Monastery 立帝货 Kingmaker ？ Buddhist Paradise 水晶宫 the Crystal Palace 兜率宫 Tushita Palace 第十四集 大战红孩儿 大战红孩儿 Fighting Against the Red Boy 枯松涧 Withered Pine Ravine 土地神 Local Deities 山神 Mountain Gods 号山 Mount Hao 火云洞 Fire-Cloud Cave 牛魔王 Bull Demon King 红孩儿 Red Boy、Boy Sage King（圣婴大王） 三昧真火 True Samadhi Fire 还魂珠 Soul-Returning Pearl 第十五集 斗法降三怪 斗法降三怪 Wiping out Three Demons after a Trial of Magic Arts 车迟国 Tarrycart Kingdom 智渊寺 Deep Wisdom Monastery 虎力大仙 Immortal Tiger 鹿力大仙 Immortal Deer 羊力大仙 Immortal Antelope 三清观 Three Pure Ones Temple 佛教徒 Buddhists 三清观 Three Purities Temple 元始天尊 Primeval Lord of Heaven 灵宝道君 Exquisite Supreme Lord 太上老君 Supreme Lord Lao Zi 五凤楼 Five Phoenixes Tower 风婆婆 Wind Mistress 雷公电母 Thunder God and Mother Lighting 雨神 Rain Goddess 终南山 Mount Zhongnan 第十六集 趣经女儿国 趣经女儿国 An Interesting Experience in the Womanland of Western Liang 西梁女儿国 Womanland of Western Liang 迎阳驿 Courier Inn 太师 Royal Tutor 子母河 Matherhood River 解阳山 Mount Xieyang 光禄寺 Guanglu Temple 琵琶洞 Pipa Cave 日卵宿星 Pleiades Star Officer 蝎子精 Scorpion Demon 第十七集 三调芭蕉扇 三调芭蕉扇 Three Bouts to Requisition the Plantain Fan 斯哈里国 Sihali Country 火焰山 Mount Flame 翠云山 Turquoise Cloud Peak 铁扇仙 Iron Fan Immortal 芭蕉洞 Plantain Cave 铁扇公主 Princess Iron Fan 须弥山 Mount Sumeru 昆仑山 Mount Kunlun 定风珠 Wind Settler 积雷山 Mount Thunder Piled 摩云洞 Cloud-Touching Cave 玉面公主 Jade Fox 碧波潭 Gree Wave Pool 辟水金睛兽 Golden-eyed Beast 第十八集 扫塔辩奇冤 扫塔辩奇冤 Clean the Pagoda and Clearing a Framed Case 祭赛国 Jisai Kingdom 金光寺 Golden Light Monastery、Subdued Dragon Pagoda（伏龙寺） 奔波儿灞 Benborba 灞波儿奔 Baborben 九头虫 the Nine-Headed Monster 碧波潭龙宫 Dragon Palace of Green Wave Pool 第十九集 误入小雷音 误入小雷音 Lured into Lesser Thunder Monastery 荆棘岭 Thorn Ridge 木仙庵 Tree Immortals Hermitage 十八公(劲节公) Eighteen Lord 孤直公 Lord Upright 凌空子 Master Emptiness 拂云叟 Cloud-Toucher 杏仙 Apricot Fairy 二十八星宿 Twenty-eight constellations 黄眉老佛 Yellow-Browed Buddha 弥勒佛 Maitreya Buddha 人种袋 Human Seed Bag、Future Heaven Bag（后天袋子） 第二十集 孙猴巧行医 孙猴巧行医 Monkey King Skillfully Practices Medicine 朱紫国金殿 Palace of Purpuria Kingdom 李世民 Li Shimin 文华殿 Wenhua Hall 乌金丹 Black Elixir 金圣皇后 Golden Queen 端午节 Dragon-Boat Festival 獬豸洞 Dog Horn Cave 赛太岁 Evil Star Matcher 有来有去 Go-Come ？ Moon Viewing Pavilion 八卦炉 Eight Trigrams Furnace 五彩霞衣 Five-Color Cloak 紫阳真人 the True Man of Ziyang 第二十一集 错坠盘丝洞 错坠盘丝洞 Trapped in Gossamer Cave 黄花观 Yellow Flower Temple 百眼魔君 Hundred-Aye Demon, Many-Ayed Monster（多目怪） 千花洞 Thousand Flower Cave 紫云山 Mount Purple Cloud 毗蓝婆 Budhisattva Vairambha 昴日星官 Pleiades Star General 第二十二集 四探无底洞 四探无底洞 Four Visits to the Bottomless Cave 镇海禅林寺 Meditation Monastery 无底洞 Bottomless Cave 陷空山 Mount Pitfall 李天王 Heavenly King Li 云楼宫 Cloud Tower Palace 灵鹫山 Vulture Peak 第二十三集 传艺玉华州 传艺玉华州 Passing on Martial Arts in Yuhua 玉华州皇宫 Palace of Yuhua Kingdom 安歇客商 Peace Hotel 唐大倌 Mr. Tang 孙二倌 Mr. Sun 猪三倌 Mr. Zhu 沙四倌 Mr. Sha 黄狮精 Tawny Lion Spirit 古怪刁钻 Wily Freak 刁钻古怪 Freaky Wile 九灵元圣祖翁 Ninefold Divine Primal Sage 太乙天尊 Great Monad 第二十四集 天竺收玉兔 天竺收玉兔 Culturing the Jade Hare 玉兔 Jade Hare 天竺 India 布金寺 Spread Gold Monastery 祗园金舍 Jetavana Garden 舍卫城 Sravasti 天竺宫殿 Indian Palace 广寒宫 Moon Palace 广目天王 Lute Heavenly King 嫦娥 Moon Goddess 第二十五集 波生极乐天 波生极乐天 More Troubles in Western Paradise 菩提树 Bodhi tree 玉真寺？ Jade True Temple 金顶大仙 Gold-Crowned Immortal 如来佛祖 Lord Buddha 三藏经文 Three Stories of Scriptures 阿傩陀 Ananda 莫可伽叶 Kasyapa 珍楼 Jewel Tower 藏经楼 Scripture Tower 佛本行经 Buddhuacarita Sutra、Buddhuacaritakvaya Sutra 西天论经 Western Heaven Sutra 菩萨经 Buddhisattva Sutra 金刚经 Diamond Sutra 宝藏经 Ratnagarbha Sutra 维摩经 Vamalakirti Sutra 正法论经 Saddharma Sutra 光明经 Mahaprabhasa Sutra 赵长春 Elder Zhao 舍卫国 Sravasti 弥勒佛祖 Maitreya 紫金钵盂 Purple Gold Bowl 菩萨戒经 Buddhisattva-vinaya Sutra 王龙经 Pancanaga Sutra 本阁经 Original Pavilion Sutra 大孔雀经 Mahamayuri-vidyarajini Sutra 通天河 Heaven River 陈家庄 Chen Village 鲤鱼精 Carp Spirit 干经石 Scripture-Drying Stone","link":"/post/6a9cf59c/"}],"tags":[{"name":"V2","slug":"V2","link":"/tags/V2/"},{"name":"系统安装","slug":"系统安装","link":"/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"内网穿透","slug":"内网穿透","link":"/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"推荐","slug":"推荐","link":"/tags/%E6%8E%A8%E8%8D%90/"},{"name":"分享","slug":"分享","link":"/tags/%E5%88%86%E4%BA%AB/"},{"name":"Github Pages","slug":"Github-Pages","link":"/tags/Github-Pages/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"数据库安装","slug":"数据库安装","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"},{"name":"SQL语法","slug":"SQL语法","link":"/tags/SQL%E8%AF%AD%E6%B3%95/"},{"name":"docker安装","slug":"docker安装","link":"/tags/docker%E5%AE%89%E8%A3%85/"},{"name":"nextcloud安装","slug":"nextcloud安装","link":"/tags/nextcloud%E5%AE%89%E8%A3%85/"},{"name":"加密算法","slug":"加密算法","link":"/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"数据传输加密","slug":"数据传输加密","link":"/tags/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%8A%A0%E5%AF%86/"},{"name":"工具箱","slug":"工具箱","link":"/tags/%E5%B7%A5%E5%85%B7%E7%AE%B1/"},{"name":"在线工具箱","slug":"在线工具箱","link":"/tags/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E7%AE%B1/"},{"name":"windows使用技巧","slug":"windows使用技巧","link":"/tags/windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"name":"BUG","slug":"BUG","link":"/tags/BUG/"},{"name":"西游记","slug":"西游记","link":"/tags/%E8%A5%BF%E6%B8%B8%E8%AE%B0/"}],"categories":[{"name":"V2","slug":"V2","link":"/categories/V2/"},{"name":"系统安装","slug":"系统安装","link":"/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"},{"name":"内网穿透","slug":"内网穿透","link":"/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"Database","slug":"Database","link":"/categories/Database/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"Nextcloud","slug":"Nextcloud","link":"/categories/Nextcloud/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"工具箱","slug":"工具箱","link":"/categories/%E5%B7%A5%E5%85%B7%E7%AE%B1/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"},{"name":"MariaDB","slug":"Database/MariaDB","link":"/categories/Database/MariaDB/"},{"name":"PostgreSQL","slug":"Database/PostgreSQL","link":"/categories/Database/PostgreSQL/"},{"name":"后端","slug":"前端/后端","link":"/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/"},{"name":"Docker","slug":"Windows/Docker","link":"/categories/Windows/Docker/"},{"name":"使用技巧","slug":"Windows/使用技巧","link":"/categories/Windows/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"name":"AngularJs","slug":"前端/AngularJs","link":"/categories/%E5%89%8D%E7%AB%AF/AngularJs/"},{"name":"加密算法","slug":"前端/后端/加密算法","link":"/categories/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%AB%AF/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"影视","slug":"影视","link":"/categories/%E5%BD%B1%E8%A7%86/"}]}